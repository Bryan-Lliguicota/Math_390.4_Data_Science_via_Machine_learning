print(i)
}
for(i in i:length(test)){
print(i)
}
for(i in 1:length(test)){
print(i)
}
print(iris[i,])
print(iris[1,])
print(iris[2,])
print(iris[2,"Species"])
print(iris[3,"Species"])
print(iris[200,"Species"])
print(iris[200,"Species"])
print(iris[130,"Species"])
for(i in 1:length(test)){
if((iris[i,"Species"])=="virginica"){
print(iris[i,"Species"]))
for(i in 1:length(test)){
if((iris[i,"Species"])=="virginica"){
print(iris[i,"Species"]))
for(i in 1:length(test)){
if((iris[i,"Species"])=="virginica")){
for(i in 1:length(test)){
if((iris[i,"Species"])=="virginica"){
print(iris[i,"Species"])
}
}
for(i in 1:length(test)){
if((iris[i,"Species"])=="virginica"){
rm(iris[i,"Species"])
}
}
for(i in 1:length(test)){
if((iris[i,"Species"])=="virginica"){
(iris[-i,])
}
}
dim(iris)
for(i in 1:length(test)){
if((iris[i,"Species"])=="virginica"){
iris<-(iris[-i,])
}
}
for(i in 1:length(test)){
if((iris[i,"Species"])=="virginica"){
(iris[-i,])
}
}
dim(iris)
labels_<-c("setosa","versicolor","virginica")
test<-c(iris[,"Species"])
spec<-factor(c(iris[, "Species"]),labels=labels_)
for(i in 1:length(test)){
if((iris[i,"Species"])=="virginica"){
(iris[-i,])
}
}
dim(iris)
data(iris)
rm(list=ls())
data(iris)
dim(iris)
for(i in 1:length(test)){
if((iris[i,"Species"])=="virginica"){
(iris[-i,])
}
}
dim(iris)
dim(iris)
for(i in 1:length(test)){
if((iris[i,"Species"])=="virginica"){
iris<-(iris[-i,])
}
}
dim(iris)
for(i in 1:length(test)){
if((iris[i,"Species"])=="virginica"){
iris<-(iris[-i,])
}
}
for(i in 1:length(test)){
if((iris[i,"Species"])=="virginica"){
iris<-(iris[-i,])
}
}
iris<-data(iris)
summary(iris)
iris<-data(iris)
summary(iris)
iris_data<-data(iris)
summary(iris)
for(i in 1:length(test)){
if((iris[i,"Species"])=="virginica"){
iris<-(iris[-i,])
}
}
for(i in 1:length(test)){
if((iris[i,"Species"])=="virginica"){
(iris[-i,])
}
}
for(i in 1:length(test)){
if((iris[i,"Species"])=="virginica"){
(iris[-i,])
}
}
dim(iris)
dim(iris)
for(i in 1:length(test)){
if((iris[i,"Species"])=="virginica"){
iris[-i,]
}
}
dim(iris)
data(iris)
dim(iris)
labels_<-c("setosa","versicolor","virginica")
test<-c(iris[,"Species"])
spec<-factor(c(iris[, "Species"]),labels=labels_)
for(i in 1:length(test)){
if((iris[i,"Species"])=="virginica"){
(iris[-i,])
}
}
dim(iris)
iris<-(iris[-i,])
for(i in 1:length(test)){
if((iris[i,"Species"])=="virginica"){
iris<-(iris[-i,])
}
}
dim(iris)
data(iris)
for(i in 1:length(test)){
if((iris[i,"Species"])=="virginica"){
iris<-(iris[-i,])
}
}
dim(iris)
summmary(iris)
summary(iris)
data(iris)
data(iris)
if((iris[i,"Species"])=="virginica"){
iris<-(iris[-i,])
}
}
data(iris)
for(i in 1:length(test)){
if((iris[i,"Species"])=="virginica"){
iris<-(iris[-i,])
}
}
summary(iris)
data(iris)
summary(iris)
for(i in 1:150){
if((iris[i,"Species"])=="virginica"){
iris<-(iris[-i,])
}
}
summary(iris)
data(iris)
summary(iris)
for(i in 1:150){
if((iris[i,"Species"])=="virginica"){
iris<-(iris[-i,])
}
}
data(iris)
summary(iris)
for(i in 1:150){
if (NA){
next
}
if((iris[i,"Species"])=="virginica"){
iris<-(iris[-i,])
}
}
data(iris)
summary(iris)
for(i in 1:150){
if (!is.na((iris[i,"Species"])=="virginica")){
iris<-(iris[-i,])
}
}
summary(iris)
dim(iris)
data(iris)
summary(iris)
for(i in 1:150){
if (!is.na((iris[i,"Species"])=="virginica") && (iris[i,"Species"])=="virginica")){
data(iris)
summary(iris)
for(i in 1:150){
if (!is.na((iris[i,"Species"])=="virginica") && (iris[i,"Species"])=="virginica"){
iris<-(iris[-i,])
}
}
summary(iris)
View(iris)
View(iris)
View(iris)
data(iris)
summary(iris)
for(i in 1:150){
iris<-(iris[-i,])
}
for(i in 1:150){
iris<-(iris[-i,])
}
for(i in 1:150){
iris<-(iris[-i,])
}
for(i in 1:150){
iris<-(iris[-i,])
}
for(i in 1:150){
iris<-(iris[-i,])
}
for(i in 1:150){
iris<-(iris[-i,])
}
for(i in 1:150){
iris<-(iris[-i,])
}
for(i in 1:150){
iris<-(iris[-i,])
}
for(i in 1:150){
iris<-(iris[-i,])
}
for(i in 1:150){
print(i)
#iris<-(iris[-i,])
}
data(iris)
```{r}
```{r}
for(i in 1:150){
iris<-(iris[-i,])
}
data(iris)
summary(iris)
for(i in 1:150){
(iris[-i,])
}
summary(iris)
print((iris[i,]))
for(i in 1:150){
print((iris[i,]))
}
for(i in 1:150){
print((iris[i,]))
}
for(i in 1:150){
if((iris[i,"Species"]=="virginica")){
print((iris[i,]))
}
}
rm_indicies<-c()
for(i in 1:150){
if((iris[i,"Species"]=="virginica")){
rm_indicies<- c(rm_indicies,i)
}
}
iris<-iris(rm_indicies,)
iris<-iris(-rm_indicies,)
rm(list=ls())
data(iris)
summary(iris)
rm_indicies<-c()
for(i in 1:150){
if((iris[i,"Species"]=="virginica")){
rm_indicies<- c(rm_indicies,i)
}
}
iris<-iris(-rm_indicies,)
iris<-iris[-rm_indicies,]
summary(iris)
dim(iris)
rm(i,rm_indicies)
summary(iris)
dim(iris)
y<-c(iris[,"Species"])
y
pacman::p_load(class)
y_hat = knn(X, c(4, 2, 1, 1, 2, 1, 2, 1), y_binary, k = 1)
Xy = na.omit(MASS::biopsy) #The "breast cancer" data
?MASS::biopsy
head(Xy)
X = Xy[, 2 : 9] #V1, V2, ..., V9
head(X)
y_binary = as.numeric(Xy$class == "malignant")
table(y_binary)
g_function = function(x_star){
best_sqd_distance = Inf #good place to begin
i_star = NA
for (i in 1 : nrow(X)){
dsqd = (X[i, 1] - x_star)^2
if (dsqd < best_sqd_distance){
best_sqd_distance = dsqd
i_star = i
}
}
y_binary[i_star]
}
g_function(7.8)
g_function(5.2)
n = 100
X = data.frame(
salary = round(rnorm(n, 50000, 20000)),
has_past_unpaid_loan = rbinom(n, size = 1, prob = 0.2),
past_crime_severity = sample(
c("no crime", "infraction", "misdimeanor", "felony"),
size = n,
replace = TRUE,
prob = c(.50, .40, .08, .02)
)
)
row.names(X) = c(
"Sophia", "Emma", "Olivia", "Ava", "Mia", "Isabella", "Riley",
"Aria", "Zoe", "Charlotte", "Lily", "Layla", "Amelia", "Emily",
"Madelyn", "Aubrey", "Adalyn", "Madison", "Chloe", "Harper",
"Abigail", "Aaliyah", "Avery", "Evelyn", "Kaylee", "Ella", "Ellie",
"Scarlett", "Arianna", "Hailey", "Nora", "Addison", "Brooklyn",
"Hannah", "Mila", "Leah", "Elizabeth", "Sarah", "Eliana", "Mackenzie",
"Peyton", "Maria", "Grace", "Adeline", "Elena", "Anna", "Victoria",
"Camilla", "Lillian", "Natalie", "Jackson", "Aiden", "Lucas",
"Liam", "Noah", "Ethan", "Mason", "Caden", "Oliver", "Elijah",
"Grayson", "Jacob", "Michael", "Benjamin", "Carter", "James",
"Jayden", "Logan", "Alexander", "Caleb", "Ryan", "Luke", "Daniel",
"Jack", "William", "Owen", "Gabriel", "Matthew", "Connor", "Jayce",
"Isaac", "Sebastian", "Henry", "Muhammad", "Cameron", "Wyatt",
"Dylan", "Nathan", "Nicholas", "Julian", "Eli", "Levi", "Isaiah",
"Landon", "David", "Christian", "Andrew", "Brayden", "John",
"Lincoln"
)
X
pacman::p_load(gmodels)
pacman::p_load(gmodels)
CrossTable(X$has_past_unpaid_loan, X$past_crime_severity, chisq = TRUE)
y<-c()
for(i in 1:100){
if((iris[i,"Species"]=="setosa")){
y<- c(y,0)
}else{
y<- c(y,1)
}
}
rm(list=ls())
data(iris)
summary(iris)
rm_indicies<-c()
for(i in 1:150){
if((iris[i,"Species"]=="virginica")){
rm_indicies<- c(rm_indicies,i)
}
}
iris<-iris[-rm_indicies,]
rm(i,rm_indicies)
summary(iris)
dim(iris)
y<-c()
for(i in 1:100){
if((iris[i,"Species"]=="setosa")){
y<- c(y,0)
}else{
y<- c(y,1)
}
}
rm(i)
if (!require("pacman")){install.packages("pacman")} #installs pacman if necessary but does not load it!
pacman::p_load(devtools)
pacman::p_load_gh("r-lib/testthat")
v <- seq(-100,100)
expect_equal(v, -100 : 100)
my_reverse <- function (v){
tmp_vec<-c()
size<- length(v)
for (i in 1:size){
tmp_vec[i]=v[size]
size <- size -1
}
tmp_vec
}
expect_equal(my_reverse(c("A", "B", "C")), c("C", "B", "A"))
expect_equal(my_reverse(v), rev(v))
R <-matrix( R,nrow = n , ncol = n)
n <- 50
R <- c(rep(1, 625), rep(2, 625), rep(0,1250 ))
R<- sample(R)
R <-matrix( R,nrow = n , ncol = n)
test<- (c(R))
expect_equal(dim(R), c(n, n))
#TO-DO test that the only unique values are 0, 1, 2
expect_equal(sort(unique(test)),c(0,1,2))
#TO-DO test that there are exactly 625 2's
test<-factor(test)
tmp<-summary(test)
expect_equal(tmp[[3]],625)
rm(test,tmp)
test<-c(R)
size <- (length(test)*.30);
test[1: size]<-NA
test<-sample(test)
R<-matrix(test,nrow=n,ncol=n)
rm(test, size)
num_missing_in_R = sum(is.na(c(R)))
expect_lt(num_missing_in_R, qbinom(0.995, n^2, 0.3))
expect_gt(num_missing_in_R, qbinom(0.005, n^2, 0.3))
for(i in 2:n){
j<- i-1
tmp<-i
while((j>=1) && (sum(R[i , ], na.rm = TRUE) > sum(R[j , ], na.rm = TRUE))){
R[tmp , ]<- R[j,]
j<j-1
tmp<- tmp -1
}
R[j+1,]=R[i, ]
}
rm(j,i,tmp)
for (i in 2 : n){
expect_gte(sum(R[i - 1, ], na.rm = TRUE), sum(R[i, ], na.rm = TRUE))
}
v = rnorm(1000, mean = -10, sd = sqrt(10))
avg_of_v <- median(v)
stand_err_of_v<-sd(v)
Five_perc_tile_of_v<-quantile(v, probs = 0.05)
test1<-Five_perc_tile_of_v[['5%']]
test2<-qnorm(c(.05),mean=-10,sd=sqrt(10))
expect_equal(test1,test2,tol=.1)
rm(test1,test2,Five_perc_tile_of_v)
inverse_quantile_obj = ecdf(v)
test1<-inverse_quantile_obj(-7000)
test2<-pnorm(c(-7000),mean=-10,sd= sqrt(10))
expect_equal(test1,test2, tol = .1)
rm(test1,test2)
my_list= list()
entry_names=c("A","B","C","D","E","F","G","H")
counter<-1
for(index in entry_names){
tmp<-counter*counter
if(index=="A"){
my_list[[index]]<-array(1 : tmp, counter)
}else{
my_list[[index]]<-array(1 : tmp, dim = rep(counter,counter))
}
counter = counter +1
}
expect_equal(my_list$A, array(1))
expect_equal(my_list[[2]][, 1], 1 : 2)
expect_equal(dim(my_list[["H"]]), rep(8, 8))
lapply(my_list, object.size)
data(iris)
summary(iris)
rm_indicies<-c()
for(i in 1:150){
if((iris[i,"Species"]=="virginica")){
rm_indicies<- c(rm_indicies,i)
}
}
iris<-iris[-rm_indicies,]
rm(i,rm_indicies)
summary(iris)
dim(iris)
y<-as.numeric(iris$Species == "versicolor")
#we want to perdict if the flower is a versicolor(1) or not (0)
#get the num of rows
n=nrow(iris)
#create a matrix to rep the threhold and num_of_error
#the threshold can be thought as part of an indicator function,
#we will have numerous thresholds (even though some repeat).
#Our i_th threshold in the i_th iteration is compared to the entire colume sepal.length
num_errors_by_parameter= matrix(NA,nrow=n,ncol=2)
colnames(num_errors_by_parameter)<-c("Threshold_param","num_of_errors")
#we create the y_logical vector, FALSE == 0 == not versicolor, TRUE ==1 ==versicolor, using our y vector
y_logical = y==1
#for each i_th iteration we have a i_th thresold and a i_th num_of_err
#if for any i_th row  in the iris datatable the sepal.length is greater than the i_th threshold AND
# its not equal to the i_th value in y_logical, we incldue it in the sum of the num_err variable.
#num_err basically say our "perdication was wrong" based on the theshold and y_logical.
for(i in 1:n){
threshold<-iris[i,"Sepal.Length"]
num_err<-sum((iris[ ,"Sepal.Length"] > threshold) != y_logical)
num_errors_by_parameter[i,]<-c(threshold,num_err)
}
best_row<- order(num_errors_by_parameter[,"num_of_errors"])[1]
num_errors_by_parameter[best_row,]
#The Expected value of the threshold parameter is 5.4 and the number of errors are 11.
summary(iris[iris$Species == "setosa", "Sepal.Length"])
summary(iris[iris$Species == "versicolor", "Sepal.Length"])
rm(list = setdiff(ls(), "iris"))
X=iris[, 1: 4]
y_binary = as.numeric(iris$Species == "versicolor")
MAX_ITER = 1000
w_vec = c(5.4,rep(0, 4))
X1 = as.matrix(cbind(1, X[, 1:4, drop = FALSE]))
for (iter in 1 : MAX_ITER){
for (i in 1 : nrow(X1)){
x_i = X1[i, ]
yhat_i = ifelse(sum(x_i * w_vec) > 0, 1, 0)
y_i = y_binary[i]
w_vec = w_vec + (y_i - yhat_i) * x_i
}
}
w_vec
y_binary
yhat = ifelse( X1 %*% w_vec > 0, 1, 0)
sum(y_binary != yhat[,1]) / length(y_binary)
